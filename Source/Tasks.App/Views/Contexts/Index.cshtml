@using Tasks.App.Models
@model ContextIndexModel

@{
    ViewBag.Title = "Tasks";
}

<h2>Tasks</h2>

<div>

    <ul class="sortable tasks">

    @foreach(var task in Model.Tasks)
    {
        <li id="@task.TaskId">
            <div class="task">
                <div class="container">
                    @Html.ActionLink("X", "CompleteTask", "Tasks", new { id = task.TaskId }, null) - 
                    @task.Title
        
                    @foreach(var context in Model.OtherContexts)
                    {
                        <span>[@Html.ActionLink("> "+context.Name, "MoveTaskToContext", "Tasks", new { targetContextId = context.ContextId, taskId = task.TaskId, fromContextId = task.ContextId }, null)]</span>
                    }
                </div>
            </div>
@*            <ul class="children">
                <li>
                    <div class="task">
                        <div class="container">
                            Test
                        </div>
                    </div>
                </li>
            </ul>*@
        </li>
    }
    </ul>

</div>

<script type="text/javascript">

    $(function () {
        var selected = $('.sortable li').first();
        selected.addClass('selected');

        $(document).bind('keydown', 'down', selectNext);
        $(document).bind('keydown', 'up', selectPrev);
        $(document).bind('keydown', 'ctrl+down', moveSelectionDown);
        $(document).bind('keydown', 'ctrl+up', moveSelectionUp);

        function moveSelectionDown() {
            selected.insertAfter(selected.next());
            updateOrder(selected);
        }
        
        function moveSelectionUp() {
            selected.insertBefore(selected.prev());
            updateOrder(selected);
        }

        function selectNext() {
            selectOther(selected.next());
        }

        function selectPrev() {
            selectOther(selected.prev());
        }

        function selectOther(newSelection) {
            if (!newSelection || !newSelection.length) {
                return;
            }
            selected.removeClass('selected');
            selected = newSelection;
            selected.addClass('selected');
        }

        var originalOrder = getCurrentOrder();

        function updateOrder(task) {
            var newOrder = getCurrentOrder();

            $.ajax({
                url: '@Url.Action("OrderTasks")',
                data: JSON.stringify({
                    TaskId: task.attr('id'),
                    OriginalOrder: originalOrder,
                    NewOrder: newOrder
                }),
                type: 'POST',
                contentType: 'application/json, charset=utf-8',
                dataType: 'json'
            });

            originalOrder = newOrder;
        }

        function getCurrentOrder() {
            return _($('.tasks > li').get()).map(function(elm) { return elm.id; });
        }
        
    });

</script>


@Html.ActionLink("Create task", "Create", "Tasks")

