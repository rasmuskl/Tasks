@using Tasks.App.Models
@using Tasks.Read.Models
@model ContextIndexModel

@{
    ViewBag.Title = "Tasks";
}

@helper Task(TaskReadModel task)
{
    <li id="@task.TaskId" class="task">
        <div>
            <div class="container">
                @Html.ActionLink("X", "CompleteTask", "Tasks", new { id = task.TaskId }, null) - 
                @task.Title
        
                @foreach(var context in Model.OtherContexts)
                {
                    <span>[@Html.ActionLink("> "+context.Name, "MoveTaskToContext", "Tasks", new { targetContextId = context.ContextId, taskId = task.TaskId, fromContextId = task.ContextId }, null)]</span>
                }
            </div>
        </div>
@*            <ul class="children">
            <li>
                <div class="task">
                    <div class="container">
                        Test
                    </div>
                </div>
            </li>
        </ul>*@
    </li>
}

<h2>Tasks</h2>

<div>

    <ul class="sortable tasks">

        @foreach(var task in Model.Tasks)
        {
            @Task(task)
        }
    
        <li id="create-task" style="display: none">
            <div>
                <div class="container">
                    @Html.TextBox("taskname")
                </div>
            </div>
        </li>
    </ul>

</div>

<script type="text/javascript">

    $(function () {
        var selected = $('.sortable li').first();
        selected.addClass('selected');

        var createTask = $('#create-task');
        var contextId = '@Model.ContextId';
        var urlCompleteTask = '@Url.Action("CompleteTask", "Tasks")';

        $(document).bind('keydown', 'down', selectNext);
        $(document).bind('keydown', 'up', selectPrev);
        $(document).bind('keydown', 'ctrl+down', moveSelectionDown);
        $(document).bind('keydown', 'ctrl+up', moveSelectionUp);
        $(document).bind('keydown', 'a', appendAfterSelected);
        $(createTask).find('input').bind('keydown', 'esc', hideCreateTask);
        $(createTask).find('input').bind('keydown', 'return', submitTask);

        function moveSelectionDown() {
            registerMoved(selected);
            selected.insertAfter(selected.nextAll('.task:first'));
            updateOrder(selected);
        }

        function moveSelectionUp() {
            registerMoved(selected);
            selected.insertBefore(selected.prevAll('.task:first'));
            updateOrder(selected);
        }

        function registerMoved(task) {
            if (moves[task]) {
                return;
            }

            console.log('register move', task);

            var next = task.nextAll('.task:first');
            var prev = task.prevAll('.task:first');
            var parent = null;

            moves[task] = {
                next: next,
                prev: prev,
                parent: parent
            };
        }

        function selectNext() {
            selectOther(selected.nextAll('.task:first'));
        }

        function selectPrev() {
            selectOther(selected.prevAll('.task:first'));
        }

        function appendAfterSelected(e) {
            e.preventDefault();
            createTask.insertAfter(selected);
            createTask.fadeIn('fast');
            selectOther(createTask);
        }

        function hideCreateTask(e) {
            e.preventDefault();
            createTask.find('input').blur();
            createTask.fadeOut('fast');
            if (createTask.prev('.task')) {
                selectOther(createTask.prev('.task'));
            } else if (createTask.next('.task')) {
                selectOther(createTask.next('.task'));
            }
        }

        function selectOther(newSelection) {
            if (!newSelection || !newSelection.length) {
                return;
            }
            selected.removeClass('selected');
            selected = newSelection;
            selected.addClass('selected');

            if (selected.attr('id') == 'create-task') {
                selected.find('input').focus();
            }

        }
        
        function submitTask() {
            $.ajax({
                url: '@Url.Action("Create", "Tasks")',
                data: JSON.stringify({
                    ContextId: contextId,
                    Title: $(createTask).find('input').val()
                }),
                type: 'POST',
                contentType: 'application/json, charset=utf-8',
                dataType: 'json',
                success: function (e) {
                    console.log(e);
                    buildClientSideTask(e, "test").insertAfter(createTask);
                }
            });

            return false;
        }
        
        // jQuery building - for now.
        function buildClientSideTask(taskId, title) {
            var liElm = $('<li>').attr('id', taskId).addClass('task');
            var wrapperElm = $('<div>').appendTo(liElm);
            var containerElm = $('<div>').addClass('container').appendTo(wrapperElm);
            containerElm.html('<a href="' + urlCompleteTask + '/' + taskId + '">X</a> - ' + title);
            return liElm;
        }

        var moves = {};

        function updateOrder(task) {
            if (!task.hasClass('task')) {
                return;
            }

            $.ajax({
                url: '@Url.Action("OrderTasks")',
                data: JSON.stringify({
                    TaskId: task.attr('id'),
                    OriginalPrev: moves[task].prev.attr('id'),
                    OriginalNext: moves[task].next.attr('id'),
                    NewPrev: task.prevAll('.task:first').attr('id'),
                    NewNext: task.nextAll('.task:first').attr('id')
                }),
                type: 'POST',
                contentType: 'application/json, charset=utf-8',
                dataType: 'json',
                success: function () {
                    delete moves[task];
                }
            });
        }

        function getCurrentOrder() {
            return _($('.tasks > li').get()).map(function (elm) { return elm.id; });
        }

    });

</script>


@Html.ActionLink("Create task", "Create", "Tasks")

