@using Tasks.App.Models
@using Tasks.Read.Models
@model ContextIndexModel

@{
    ViewBag.Title = "Tasks - " + Model.ContextName;
}

@helper Task(TaskReadModel task, bool allowMoveContext)
{
    <li id="@task.TaskId" class="task">
        <div>
            <div class="container">
                @Html.ActionLink("X", "CompleteTask", "Tasks", new { id = task.TaskId }, null) - 
                @task.Title
        
                @if(allowMoveContext)
                {
                    foreach(var context in Model.OtherContexts)
                    {
                        <span>[@Html.ActionLink("> "+context.Name, "MoveTaskToContext", "Tasks", new { targetContextId = context.ContextId, taskId = task.TaskId, fromContextId = task.ContextId }, null)]</span>
                    }
                }
            </div>
        </div>
        <ul class="children">
            @foreach(var child in task.NestedTasks)
            {
                @Task(child, false)
            }
        </ul>
    </li>
}

<h2>@Model.ContextName</h2>

<div>

    <ul class="sortable tasks">

        @foreach(var task in Model.Tasks)
        {
            @Task(task, true)
        }
    
        <li id="create-task" style="display: none">
            <div>
                <div class="container">
                    @Html.TextBox("taskname")
                </div>
            </div>
        </li>
    </ul>

</div>

<script type="text/javascript">

    $(function () {
        var selected = $('.sortable li').first();
        selected.addClass('selected');

        var createTask = $('#create-task');
        var contextId = '@Model.ContextId';
        var urlCompleteTask = '@Url.Action("CompleteTask", "Tasks")';

        $(document).bind('keydown', 'down', selectNext);
        $(document).bind('keydown', 'up', selectPrev);
        $(document).bind('keydown', 'right', selectChild);
        $(document).bind('keydown', 'left', selectParent);
        $(document).bind('keydown', 'ctrl+down', moveSelectionDown);
        $(document).bind('keydown', 'ctrl+up', moveSelectionUp);
        $(document).bind('keydown', 'a', openCreateTaskAfterSelected);
        $(document).bind('keydown', 'i', openCreateTaskInsideSelected);
        $(document).bind('keydown', 'x', completeSelectedTask);
        $(createTask).find('input').bind('keydown', 'esc', hideCreateTask);
        $(createTask).find('input').bind('keydown', 'return', submitTask);

        showCreateIfNoTasks();

        function showCreateIfNoTasks() {
            if(!$('.task').length) {
                createTask.appendTo($('.tasks'));
                createTask.show();
                selectOther(createTask);
            }
        }

        function moveSelectionDown() {
            registerMoved(selected);
            selected.insertAfter(selected.nextAll('.task:first'));
            updateOrder(selected);
        }

        function moveSelectionUp() {
            registerMoved(selected);
            selected.insertBefore(selected.prevAll('.task:first'));
            updateOrder(selected);
        }

        function registerMoved(task) {
            if (moves[task]) {
                return;
            }

            console.log('register move', task);

            var next = task.nextAll('.task:first');
            var prev = task.prevAll('.task:first');
            var parent = null;

            moves[task] = {
                next: next,
                prev: prev,
                parent: parent
            };
        }

        function selectChild() {
            selectOther($('.task', selected).first());
        }

        function selectParent() {
            selectOther(selected.parent().closest('.task'));
        }

        function selectNext() {
            selectOther(selected.nextAll('.task:first'));
        }

        function selectPrev() {
            selectOther(selected.prevAll('.task:first'));
        }

        function openCreateTaskAfterSelected() {
            createTask.insertAfter(selected);
            createTask.fadeIn('fast');
            selectOther(createTask);
            return false;
        }
        
        function openCreateTaskInsideSelected() {
            createTask.appendTo(selected.find('.children'));
            createTask.fadeIn('fast');
            selectOther(createTask);
            return false;
        }

        function hideCreateTask() {
            // Don't hide if no tasks showing
            if(!$('.task').length) {
                return false;
            }
            createTask.find('input').val('').blur();
            createTask.fadeOut('fast');
            if (createTask.prevAll('.task').length) {
                selectOther(createTask.prevAll('.task').first());
            } else if (createTask.nextAll('.task').length) {
                selectOther(createTask.nextAll('.task').first());
            }

            return false;
        }

        function selectOther(newSelection) {
            console.log('selectOther', newSelection);

            if (!newSelection || !newSelection.length) {
                return;
            }
            selected.removeClass('selected');
            selected = newSelection;
            selected.addClass('selected');

            if (selected.attr('id') == 'create-task') {
                selected.find('input').focus();
            }
        }

        function completeSelectedTask() {

            var selectedElm = selected;

            $.ajax({
                url: '@Url.Action("CompleteTask", "Tasks")',
                data: JSON.stringify({
                    Id: selectedElm.attr('id')
                }),
                type: 'POST',
                contentType: 'application/json, charset=utf-8',
                dataType: 'json',
                success: function () {
                    if (selectedElm.prevAll('.task').length) {
                        console.log('prev');
                        selectOther(selectedElm.prevAll('.task').first());
                    } else if (selectedElm.nextAll('.task').length) {
                        console.log('next');
                        selectOther(selectedElm.nextAll('.task').first());
                    }

                    selectedElm.remove();
                    showCreateIfNoTasks();
                }
            });

            return false;
        }
        
        function submitTask() {
            var title = $(createTask).find('input').val();
            var prevTask = $(createTask).prevAll('.task').first();
            var parentTask = $(createTask).parent().closest('.task');

            $.ajax({
                url: '@Url.Action("Create", "Tasks")',
                data: JSON.stringify({
                    ContextId: contextId,
                    Title: title,
                    PrevTaskId: prevTask ? prevTask.attr('id') : '',
                    ParentTaskId: parentTask ? parentTask.attr('id') : ''
                }),
                type: 'POST',
                contentType: 'application/json, charset=utf-8',
                dataType: 'json',
                success: function (e) {
                    buildClientSideTask(e, title).insertBefore(createTask);
                    $('input', createTask).select();
                }
            });

            return false;
        }
        
        // jQuery building - for now.
        function buildClientSideTask(taskId, title) {
            var liElm = $('<li>').attr('id', taskId).addClass('task');
            var wrapperElm = $('<div>').appendTo(liElm);
            var containerElm = $('<div>').addClass('container').appendTo(wrapperElm);
            containerElm.html('<a href="' + urlCompleteTask + '/' + taskId + '">X</a> - ' + title);
            return liElm;
        }

        var moves = {};

        function updateOrder(task) {
            if (!task.hasClass('task')) {
                return;
            }

            $.ajax({
                url: '@Url.Action("OrderTasks")',
                data: JSON.stringify({
                    TaskId: task.attr('id'),
                    OriginalPrev: moves[task].prev.attr('id'),
                    OriginalNext: moves[task].next.attr('id'),
                    NewPrev: task.prevAll('.task:first').attr('id'),
                    NewNext: task.nextAll('.task:first').attr('id')
                }),
                type: 'POST',
                contentType: 'application/json, charset=utf-8',
                dataType: 'json',
                success: function () {
                    delete moves[task];
                }
            });
        }
    });

</script>